[{"/Users/ethai/Desktop/Shopify/src/index.js":"1","/Users/ethai/Desktop/Shopify/src/App.js":"2","/Users/ethai/Desktop/Shopify/src/reportWebVitals.js":"3","/Users/ethai/Desktop/Shopify/src/Utils/apiHelper.js":"4","/Users/ethai/Desktop/Shopify/src/utils/apiHelper.js":"5","/Users/ethai/Desktop/Shopify/src/components/results.js":"6"},{"size":500,"mtime":1608423594269,"results":"7","hashOfConfig":"8"},{"size":3806,"mtime":1608955535399,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608332651642,"results":"10","hashOfConfig":"8"},{"size":324,"mtime":1608760163605,"results":"11","hashOfConfig":"8"},{"size":324,"mtime":1608760163605,"results":"12","hashOfConfig":"8"},{"size":5515,"mtime":1608863837730,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bm9jt2",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},"/Users/ethai/Desktop/Shopify/src/index.js",[],"/Users/ethai/Desktop/Shopify/src/App.js",["28"],"/Users/ethai/Desktop/Shopify/src/reportWebVitals.js",[],["29","30"],"/Users/ethai/Desktop/Shopify/src/Utils/apiHelper.js",[],"/Users/ethai/Desktop/Shopify/src/utils/apiHelper.js",[],"/Users/ethai/Desktop/Shopify/src/components/results.js",["31"],"import React from 'react';\nimport { makeStyles, withTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Alert from '@material-ui/lab/Alert';\nimport Zoom from '@material-ui/core/Zoom';\nimport Collapse from '@material-ui/core/Collapse';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: 'auto',\n  },\n  cardHeader: {\n    padding: theme.spacing(1, 2),\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.headerText,\n  },\n  list: {\n    width: 500,\n    height: 500,\n    color: theme.palette.secondary.main,\n    backgroundColor: theme.palette.primary.background,\n    overflow: 'auto',\n  },\n  button: {\n    backgroundColor: theme.palette.secondary.main,\n    margin: theme.spacing(0.5, 0),\n  },\n}));\n\nfunction not(a, b) {\n  return a.filter((value) => b.indexOf(value) === -1);\n}\n\nfunction intersection(a, b) {\n  return a.filter((value) => b.indexOf(value) !== -1);\n}\n\nexport default function TransferList(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([]);\n  const [left, setLeft] = React.useState([]);\n  const [right, setRight] = React.useState([]);\n  const [banner, showBanner] = React.useState(false);\n\n  \n  const leftChecked = intersection(checked, left);\n  const rightChecked = intersection(checked, right);\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n    setChecked(newChecked);\n  };\n\n  const numberOfChecked = (items) => intersection(checked, items).length;\n\n  const handleCheckedRight = () => {\n    //Allow at most 5 nominations\n    if (right.length + leftChecked.length <= 5) {\n      setRight(right.concat(leftChecked));\n      setLeft(not(left, leftChecked));\n      setChecked(not(checked, leftChecked));\n    }\n  };\n\n  const handleCheckedLeft = () => {\n    setLeft(left.concat(rightChecked));\n    setRight(not(right, rightChecked));\n    setChecked(not(checked, rightChecked));\n  };\n\n  React.useEffect(() => {\n    const mappedTestArr = props.moviesData.map((d) => `${d.Title} (${d.Year})`).filter((e)  => !right.includes(e));\n    setLeft(mappedTestArr);\n  },[props.moviesData, right]);\n\n  React.useEffect(() => {\n    if (right.length === 5) {\n      console.log(\"show banner\");\n      showBanner(true);\n\n    }\n    else {\n      console.log(\"dont show banner\");\n      showBanner(false);\n    }\n    },[right]);\n\n  const customList = (title, items) => (\n    <Card>\n      <CardHeader\n        className={classes.cardHeader}\n        title={title}\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\n      />\n      <Divider />\n      <Collapse appear in={right.length + leftChecked.length > 5 && title === \"Results\"} timeout={1500}>\n        <Alert severity=\"warning\">You can only Nominate 5 Movies</Alert>\n      </Collapse>\n      <Collapse appear in={banner && title === \"Nominations\"} timeout={1500}>\n        <Alert severity=\"success\">You Have Nominated 5 Movies!</Alert>\n      </Collapse>\n      <List className={classes.list} dense component=\"div\" role=\"list\">\n        {items.map((value) => {\n          const labelId = `transfer-list-all-item-${value}-label`;\n\n          return (\n          <Zoom in timeout={1000}>\n            <ListItem key={value} role=\"listitem\" button onClick={handleToggle(value)}>\n              <ListItemText id={labelId} primary={value} />\n              <ListItemIcon>\n                <Checkbox\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ 'aria-labelledby': labelId }}\n                />\n              </ListItemIcon>\n            </ListItem>\n          </Zoom>\n          );\n        })}\n        <ListItem />\n      </List>\n    </Card>\n  );\n\n  return (\n    <>\n      <Grid container spacing={5} justify=\"center\" alignItems=\"center\" className={classes.root}>\n        <Grid item>{customList('Results', left)}</Grid>\n        <Grid item>\n          <Grid container direction=\"column\" alignItems=\"center\">\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              className={classes.button}\n              onClick={handleCheckedRight}\n              disabled={leftChecked.length === 0 || right.length + leftChecked.length > 5}\n              aria-label=\"move selected right\"\n              color=\"primary\"\n            >\n              Nominate &gt;\n            </Button>\n            <Button\n              variant=\"contained\"\n              size=\"small\"\n              className={classes.button}\n              onClick={handleCheckedLeft}\n              disabled={rightChecked.length === 0}\n              aria-label=\"move selected left\"\n              color=\"primary\"\n            >\n              Remove Nomination &lt;\n            </Button>\n          </Grid>\n        </Grid>\n        <Grid item>{customList('Nominations', right)}</Grid>\n      </Grid>\n    </>\n  );\n}\n",{"ruleId":"32","severity":1,"message":"33","line":2,"column":22,"nodeType":"34","messageId":"35","endLine":2,"endColumn":31},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":22,"nodeType":"34","messageId":"35","endLine":2,"endColumn":31},"no-unused-vars","'withTheme' is defined but never used.","Identifier","unusedVar","no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-global-assign","no-unsafe-negation"]